{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useAmbientLightLevel","useState","lightLevel","setLightLevel","error","setError","isSupported","setIsSupported","useEffect","window","sensor","AmbientLightSensor","onreading","illuminance","onerror","event","start","AutoThemeProvider","children","props","themeName","setThemeName","theme","themes","light","bg","color","dark","Container","styled","main","Level","h1","Help","p","App","JSON","stringify","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA8BA,IAAMA,EAAuB,WAC3B,MAAoCC,mBAAwB,MAA5D,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAqB,MAA/C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsCJ,mBAAyB,MAA/D,mBAAOK,EAAP,KAAoBC,EAApB,KAwBA,OAtBAC,qBAAU,WACR,GAAM,uBAAwBC,OAK9B,IACE,IAAMC,EAAS,IAAIC,mBAInBD,EAAOE,UAHW,kBAAMT,EAAcO,EAAOG,cAI7CH,EAAOI,QAHS,SAACC,GAAD,OAA2BV,EAASU,EAAMX,QAK1DM,EAAOM,QAEPT,GAAe,GACf,MAAOH,GACPC,EAASD,QAhBTG,GAAe,KAkBhB,IAEI,CAAEL,aAAYE,QAAOE,gBAGxBW,EAAoB,SAAC,GAOpB,IANLf,EAMI,EANJA,WACAgB,EAKI,EALJA,SACGC,EAIC,iBACJ,EAAkClB,mBAAoB,SAAtD,mBAAOmB,EAAP,KAAkBC,EAAlB,KAQA,OAPAb,qBACE,WACqB,OAAfN,GACJmB,EAAanB,EAAa,IAAM,QAAU,UAE5C,CAACA,IAGD,cAAC,IAAD,yBAAeoB,MAAOC,EAAOH,IAAgBD,GAA7C,aACGD,MAODK,EAAiD,CACrDC,MAAO,CAAEC,GAAI,QAASC,MAAO,SAC7BC,KAAM,CAAEF,GAAI,QAASC,MAAO,UAGxBE,EAAYC,IAAOC,KAAV,8OAUC,SAACX,GAAD,OAAWA,EAAMG,MAAMG,MAC5B,SAACN,GAAD,OAAWA,EAAMG,MAAMI,SAG5BK,EAAQF,IAAOG,GAAV,oFAMLC,EAAOJ,IAAOK,EAAV,iDAIKC,EA/Gf,WACE,MAA2CnC,IAAnCE,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,MAAOE,EAA3B,EAA2BA,YAC3B,OACE,cAAC,EAAD,CAAmBJ,WAAYA,EAA/B,SACE,eAAC0B,EAAD,WACE,+DACA,cAACG,EAAD,UAAuB,OAAf7B,EAAsB,UAAtB,UAAqCA,EAArC,UACR,+BAAOkC,KAAKC,UAAU,CAAEjC,QAAOE,kBAC/B,eAAC2B,EAAD,qCACyB,sDADzB,2NAIiE,IAC/D,mBAAGK,KAAK,sDAAR,SACE,yEACG,IAPP,iBAQiB,IACf,mBAAGA,KAAK,4FAAR,iBAEK,IAXP,0BCGOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7d4f8fae.chunk.js","sourcesContent":["import { ReactNode, useEffect, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\n\nfunction App() {\n  const { lightLevel, error, isSupported } = useAmbientLightLevel();\n  return (\n    <AutoThemeProvider lightLevel={lightLevel}>\n      <Container>\n        <div>Current ambient light level:</div>\n        <Level>{lightLevel === null ? \"Unknown\" : `${lightLevel} lux`}</Level>\n        <code>{JSON.stringify({ error, isSupported })}</code>\n        <Help>\n          This is a demo for the <code>AmbientLightSensor</code> sensor API. Try\n          looking at this page at different ambient light levels. Your device\n          needs to have an ambient light sensor. Also not all browsers support\n          this and those that do might require you to toggle a flag like{\" \"}\n          <a href=\"chrome://flags/#enable-generic-sensor-extra-classes\">\n            <code>enable-generic-sensor-extra-classes</code>\n          </a>{\" \"}\n          first. See the{\" \"}\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor#browser_compatibility\">\n            MDN\n          </a>{\" \"}\n          for more info.\n        </Help>\n      </Container>\n    </AutoThemeProvider>\n  );\n}\n\nconst useAmbientLightLevel = () => {\n  const [lightLevel, setLightLevel] = useState<number | null>(null);\n  const [error, setError] = useState<any | null>(null);\n  const [isSupported, setIsSupported] = useState<boolean | null>(null);\n\n  useEffect(function subToSensor() {\n    if (!(\"AmbientLightSensor\" in window)) {\n      setIsSupported(false);\n      return;\n    }\n\n    try {\n      const sensor = new AmbientLightSensor();\n      const onreading = () => setLightLevel(sensor.illuminance);\n      const onerror = (event: { error: any }) => setError(event.error);\n\n      sensor.onreading = onreading;\n      sensor.onerror = onerror;\n\n      sensor.start();\n\n      setIsSupported(true);\n    } catch (error) {\n      setError(error);\n    }\n  }, []);\n\n  return { lightLevel, error, isSupported } as const;\n};\n\nconst AutoThemeProvider = ({\n  lightLevel,\n  children,\n  ...props\n}: {\n  children: ReactNode;\n  lightLevel: number | null;\n}) => {\n  const [themeName, setThemeName] = useState<ThemeName>(\"light\");\n  useEffect(\n    function updateThemeWhenLightLevelChanges() {\n      if (lightLevel === null) return;\n      setThemeName(lightLevel > 100 ? \"light\" : \"dark\");\n    },\n    [lightLevel]\n  );\n  return (\n    <ThemeProvider theme={themes[themeName]} {...props}>\n      {children}\n    </ThemeProvider>\n  );\n};\n\ntype ThemeName = \"light\" | \"dark\";\n\nconst themes: Record<ThemeName, Record<string, any>> = {\n  light: { bg: \"white\", color: \"black\" },\n  dark: { bg: \"black\", color: \"white\" },\n};\n\nconst Container = styled.main`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  box-sizing: border-box;\n\n  background: ${(props) => props.theme.bg};\n  color: ${(props) => props.theme.color};\n`;\n\nconst Level = styled.h1`\n  font-size: 92px;\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst Help = styled.p`\n  max-width: 500px;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}